// Code generated by sqlc. DO NOT EDIT.
// source: posts.sql

package codegen

import (
	"context"
	"database/sql"
	"time"
)

const deletePostByID = `-- name: DeletePostByID :execresult
delete from "posts" where "id" = $1
`

func (q *Queries) DeletePostByID(ctx context.Context, id string) (sql.Result, error) {
	return q.db.ExecContext(ctx, deletePostByID, id)
}

const getPostByID = `-- name: GetPostByID :one






select id, "user", title, content, updated, updated_at from "posts" where "id" = $1
`

// BSD 3-Clause License
// Copyright (c) 2021, Michael Grigoryan
// All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
// 1. Redistributions of source code must retain the above copyright notice, this
//    list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived from
//    this software without specific prior written permission.
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
func (q *Queries) GetPostByID(ctx context.Context, id string) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPostByID, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.User,
		&i.Title,
		&i.Content,
		&i.Updated,
		&i.UpdatedAt,
	)
	return i, err
}

const getPostsOfUserAfterID = `-- name: GetPostsOfUserAfterID :many
select
    "post"."id",
    "post"."title",
    "post"."updated",
    "post"."updated_at",
    -- COALESCE-ing here, since we do not want to see the unmarshalled 
    -- contents of Go's ` + "`" + `sql.NullString` + "`" + `.
    COALESCE("post"."content", '') as "content"
from "posts" "post"
left join
    "users" "user" on "post"."user" = "user"."id" 
where
    "user"."username" = $1
        and
    -- ULIDs are sortable, thus, we do not have to do any wizardry
    -- that would involve sorting UUIDs. more info at: https://github.com/ulid/spec
    "post"."id" > $2
group by "post"."id", "user"."id" limit 10
`

type GetPostsOfUserAfterIDParams struct {
	Username string `json:"username"`
	ID       string `json:"id"`
}

type GetPostsOfUserAfterIDRow struct {
	ID        string    `json:"id"`
	Title     string    `json:"title"`
	Updated   bool      `json:"updated"`
	UpdatedAt time.Time `json:"updated_at"`
	Content   string    `json:"content"`
}

// This query will fetch posts of a user by using their ID, starting
// from a cursor provided by the URL query of the HTTP request.
func (q *Queries) GetPostsOfUserAfterID(ctx context.Context, arg GetPostsOfUserAfterIDParams) ([]GetPostsOfUserAfterIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getPostsOfUserAfterID, arg.Username, arg.ID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostsOfUserAfterIDRow
	for rows.Next() {
		var i GetPostsOfUserAfterIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Updated,
			&i.UpdatedAt,
			&i.Content,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertPost = `-- name: InsertPost :one
insert into "posts" ("user", "title", "content")
values ($1, $2, $3) returning id, "user", title, content, updated, updated_at
`

type InsertPostParams struct {
	User    string         `json:"user"`
	Title   string         `json:"title"`
	Content sql.NullString `json:"content"`
}

func (q *Queries) InsertPost(ctx context.Context, arg InsertPostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, insertPost, arg.User, arg.Title, arg.Content)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.User,
		&i.Title,
		&i.Content,
		&i.Updated,
		&i.UpdatedAt,
	)
	return i, err
}
