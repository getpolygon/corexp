// Code generated by sqlc. DO NOT EDIT.
// source: upvotes.sql

package codegen

import (
	"context"

	"github.com/google/uuid"
)

const deletePostUpvoteByID = `-- name: DeletePostUpvoteByID :exec
delete from upvotes where id = $1
`

func (q *Queries) DeletePostUpvoteByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deletePostUpvoteByID, id)
	return err
}

const insertPostUpvoteByID = `-- name: InsertPostUpvoteByID :one
insert into upvotes (user_id, post_id) 
values ($1, $2) returning id, post_id, user_id, created_at
`

type InsertPostUpvoteByIDParams struct {
	UserID uuid.UUID `json:"user_id"`
	PostID uuid.UUID `json:"post_id"`
}

func (q *Queries) InsertPostUpvoteByID(ctx context.Context, arg InsertPostUpvoteByIDParams) (Upvote, error) {
	row := q.db.QueryRowContext(ctx, insertPostUpvoteByID, arg.UserID, arg.PostID)
	var i Upvote
	err := row.Scan(
		&i.ID,
		&i.PostID,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}
