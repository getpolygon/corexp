// Code generated by sqlc. DO NOT EDIT.
// source: upvotes.sql

package codegen

import (
	"context"

	"github.com/google/uuid"
)

const deletePostUpvoteOfUser = `-- name: DeletePostUpvoteOfUser :exec
delete from upvotes where ("user", "post") = ($1, $2)
`

type DeletePostUpvoteOfUserParams struct {
	User   uuid.UUID `json:"user"`
	User_2 uuid.UUID `json:"user_2"`
}

func (q *Queries) DeletePostUpvoteOfUser(ctx context.Context, arg DeletePostUpvoteOfUserParams) error {
	_, err := q.db.ExecContext(ctx, deletePostUpvoteOfUser, arg.User, arg.User_2)
	return err
}

const insertPostUpvoteByUser = `-- name: InsertPostUpvoteByUser :one
insert into upvotes ("user", "post") 
values ($1, $2) returning post, "user", created_at
`

type InsertPostUpvoteByUserParams struct {
	User uuid.UUID `json:"user"`
	Post uuid.UUID `json:"post"`
}

func (q *Queries) InsertPostUpvoteByUser(ctx context.Context, arg InsertPostUpvoteByUserParams) (Upvote, error) {
	row := q.db.QueryRowContext(ctx, insertPostUpvoteByUser, arg.User, arg.Post)
	var i Upvote
	err := row.Scan(&i.Post, &i.User, &i.CreatedAt)
	return i, err
}
