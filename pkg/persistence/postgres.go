// BSD 3-Clause License

// Copyright (c) 2021, Michael Grigoryan
// All rights reserved.

// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:

// 1. Redistributions of source code must retain the above copyright notice, this
//    list of conditions and the following disclaimer.

// 2. Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.

// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived from
//    this software without specific prior written permission.

// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
package persistence

import (
	"database/sql"
	"errors"
	"strings"

	_ "github.com/lib/pq"
	"github.com/spf13/viper"
	"polygon.am/core/pkg/persistence/codegen"
)

// This exported variable contains all the queries generated
// by sqlc for usage with PostgreSQL.
var Queries *codegen.Queries

// This function will attempt to open a connection to the specified
// PostgreSQL URL and initialize the queries generated by sqlc.
func Connect() error {
	// Getting the PostgreSQL connection string from the config
	// using viper.
	dsn := viper.GetString("polygon.persistence.postgres")
	if strings.Trim(dsn, " ") == "" {
		return errors.New("postgres dsn string cannot be empty.")
	}

	// Attempting to open a connection to PostgreSQL
	if conn, err := sql.Open("postgres", dsn); err != nil {
		defer conn.Close()
		return err
	} else {
		// Executing a ping request to PostgreSQL, to completely
		// verify that the connection has been established successfully.
		if err := conn.Ping(); err != nil {
			return err
		} else {
			// Assigning the connection to all the queries for global
			// usage.
			Queries = codegen.New(conn)
			return nil
		}
	}
}
