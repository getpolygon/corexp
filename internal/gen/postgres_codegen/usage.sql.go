// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: usage.sql

package postgres_codegen

import (
	"context"
)

const getFullUsageStats = `-- name: GetFullUsageStats :one
select
    count(distinct "users"."id") as "users_count",
    count(distinct "posts"."id") as "posts_count",
    count(distinct "comments"."id") as "comments_count",
    (
        select
            count(distinct "id")
        from
            "users"
        where
            date_part('day', "online_at" :: date) - date_part('day', current_timestamp :: date) between 0
            and 30
    ) as "active_users_month",
    (
        select
            count(distinct "id")
        from
            "users"
        where
            date_part('day', "online_at" :: date) - date_part('day', current_timestamp :: date) between 0
            and 180
    ) as "active_users_half_year"
from
    "users",
    "posts",
    "comments"
`

type GetFullUsageStatsRow struct {
	UsersCount          int64 `json:"users_count"`
	PostsCount          int64 `json:"posts_count"`
	CommentsCount       int64 `json:"comments_count"`
	ActiveUsersMonth    int64 `json:"active_users_month"`
	ActiveUsersHalfYear int64 `json:"active_users_half_year"`
}

func (q *Queries) GetFullUsageStats(ctx context.Context) (GetFullUsageStatsRow, error) {
	row := q.db.QueryRowContext(ctx, getFullUsageStats)
	var i GetFullUsageStatsRow
	err := row.Scan(
		&i.UsersCount,
		&i.PostsCount,
		&i.CommentsCount,
		&i.ActiveUsersMonth,
		&i.ActiveUsersHalfYear,
	)
	return i, err
}
